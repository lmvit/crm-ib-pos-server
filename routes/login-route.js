require('dotenv').config();
const express = require('express');
const Database = require('../Database');
const router = express.Router();
const jwt = require('jsonwebtoken');

router.post('/register/details',async(req,res)=>{
    try {
        let posId;
        const count = await(await Database.DB.query(`select * from pos_details`)).rowCount;
        if(count===0){
            posId = 'pos30001'
        }else{
            const rows = await(await Database.DB.query(`select pos_id from pos_details order by pos_id desc limit 1`)).rows;
            const id = rows[0].pos_id;
            const posIdSeq = id.slice(0,4);
            const idIncrement = parseInt(id.slice(5))+1;
            const increment = '000'+idIncrement.toString();
            const posIdIncrement = increment.slice(-4);
            posId = (posIdSeq+posIdIncrement).toString();    
        }
        const mobile = req.body.mobile_number;
        const firstName = req.body.first_name;
        const generatedPassword = mobile.toString().slice(-4);
        const password = firstName+ Math.round(parseInt(generatedPassword)*Math.random()*10);
        const autoGeneratedId = {
            pos_id : posId,
            password : password
        }
        const obj = {...req.body,...autoGeneratedId}
    
        let valueIndex =()=>{
            return  Object.values(obj).map((ele,index)=>`$${index+1}`).join(',')
        }
        const result = await Database.DB.query(`insert into pos_details (${Object.keys(obj).join(',')}) values (${valueIndex()})`,Object.values(obj));
        res.send(result ? 'successfully inserted':'failed').end();
    } catch (error) {
        console.log(error);
    }
});

router.post('/validate-details', async(req, res) => {
    try {
        const { mobile_number,email,aadhar_number,pancard,account_number } = req.body;
        const mobileQuery = await (await Database.DB.query(`select mobile_number= ${mobile_number} from pos_details`)).rows;
        const emailAddressQuery = await (await Database.DB.query(`select email='${email.toLowerCase()}' from pos_details`)).rows;
        const  aadharQuery = await (await Database.DB.query(`select aadhar_number=${aadhar_number} from pos_details`)).rows;
        const  panQuery = await (await Database.DB.query(`select pancard='${pancard.toLowerCase()}' from pos_details`)).rows;
        const  accountNumberQuery = await (await Database.DB.query(`select account_number='${account_number}' from pos_details`)).rows;
        function validate(x) {
            let valid = false;
            x.filter(e => {
                if (Object.values(e).toString().includes("true")) {
                    return valid = true;
                }
            })
            return valid;
        }
        const mobile = validate(mobileQuery);
        const mail = validate(emailAddressQuery);
        const aadhar = validate(aadharQuery);
        const pan = validate(panQuery);
        const accountNumber = validate(accountNumberQuery);
        if (mobile) {
            return res.send('Mobile Number Already exists');
        } if (mail) {
            return res.send('Email Already exists');
        } if (aadhar) {
            return res.send('Aadhar Number Already exists');
        }if (pan) {
            return res.send('Pancard Number Already exists');
        }if (accountNumber) {
            return res.send('Account Number Already exists');
        }else {
            return res.send('No Duplicate Values Found')
        }
    } catch (error) {
        console.log(error)
    }
});

router.post('/pos-login',async(req,res)=>{
    console.log(req.body)
    const {posId,password} = req.body;
    const posIdCheck = posId.indexOf('@');
    let result,posToken;
    // const user={pos_id : posId}
    if(posIdCheck >= 0){
        const getPosId = await(await Database.DB.query(`select pos_id from pos_details where email ='${posId}'`)).rows;
       result = await (await Database.DB.query(`select email,password from pos_details where email='${posId}' and password='${password}'`)).rows;
       console.log(getPosId)
       const user={pos_id : getPosId[0].pos_id}
        posToken = jwt.sign(user,process.env.ACCESS_TOKEN_SECRET)
    }else{
        result = await (await Database.DB.query(`select pos_id,password from pos_details where pos_id ='${posId}' and password='${password}'`)).rows;
        const user={pos_id:posId}
        posToken = jwt.sign(user,process.env.ACCESS_TOKEN_SECRET)
    }
    if(result.length >= 0){
        return res.send({message:'success',status:200,accessToken : posToken}).end();
    }else{
        return res.send({message:'Failed',status:404}).end();
    }
});

router.get('/loginId-username/loginId-username/:id',async(req,res)=>{
    try {
        res.send(await(await Database.DB.query(`select first_name,last_name from pos_customers where pos_id = '${req.params.id}'`)).rows).end();
    } catch (error) {
        console.log(error);
    }
});

module.exports = router;